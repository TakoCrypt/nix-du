#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(dead_code)]
/* automatically generated by rust-bindgen */

pub type __uint64_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct path_t {
    pub path: *const ::std::os::raw::c_char,
    pub size: u64,
    pub is_root: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_path_t() {
    assert_eq!(
        ::std::mem::size_of::<path_t>(),
        24usize,
        concat!("Size of: ", stringify!(path_t))
    );
    assert_eq!(
        ::std::mem::align_of::<path_t>(),
        8usize,
        concat!("Alignment of ", stringify!(path_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<path_t>())).path as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(path_t),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<path_t>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(path_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<path_t>())).is_root as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(path_t),
            "::",
            stringify!(is_root)
        )
    );
}
extern "C" {
    pub fn populateGraph(graph: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
